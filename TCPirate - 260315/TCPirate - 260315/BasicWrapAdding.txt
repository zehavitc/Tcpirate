private boolean addWrapToPacket(int execImmFirstOffset)
    {
        // Change packet length
        int LSByte = (m_relay_buffer[1] & 0xFF);
        int MSByte = (m_relay_buffer[0]&0xFF);
        int packetLength = (MSByte << 8) | LSByte;
        packetLength += 6;
        m_relay_buffer[1] = (byte)(packetLength & 0xFF);
        m_relay_buffer[0] = (byte)((packetLength >> 8) & 0xFF);

        //Change statement length - First place:
        byte [] tmp = new byte[2];
        tmp[0] = (byte)3;
        tmp[1] = (byte)94;

        int offset = KMPMatch.indexOf(m_relay_buffer, tmp);
        if(offset == -1)
        {
            return false;
        }
        int length = (int)m_relay_buffer[offset+15];
        length += 6;
        m_relay_buffer[offset+15] = (byte)(length & 0xFF);

        //Change statement length - First place:
        m_relay_buffer[offset+115] = (byte)(length & 0xFF);

        //Add WRAP( ... ) to statement:
        m_relay_current_pos += 5;
        for(int i = 0; i <= m_relay_current_pos-execImmFirstOffset-23; i++)
        {
            m_relay_buffer[m_relay_current_pos-i] = m_relay_buffer[m_relay_current_pos-i-5];
        }
        m_relay_buffer[execImmFirstOffset+18] = 'W';
        m_relay_buffer[execImmFirstOffset+19] = 'R';
        m_relay_buffer[execImmFirstOffset+20] = 'A';
        m_relay_buffer[execImmFirstOffset+21] = 'P';
        m_relay_buffer[execImmFirstOffset+22] = '(';

        //Add the ) to the WRAP function:
        //Add the ) before the ';' or before the space before USING if it exists.

        int exec_imm_statement_length = 0;
        while(m_relay_buffer[execImmFirstOffset+23+exec_imm_statement_length] != ';')
        {
            exec_imm_statement_length++;
        }
        byte [] stmt = new byte[exec_imm_statement_length];
        for(int i = 0; i < exec_imm_statement_length; i++)
        {
            stmt[i] = m_relay_buffer[execImmFirstOffset+23+i];
        }

        int usingOffset = KMPMatch.indexOf(stmt, " USING".getBytes());
        if(usingOffset == -1) //No using
        {
            offset = execImmFirstOffset+23+exec_imm_statement_length;
        }
        else
        {
            offset = execImmFirstOffset+23+usingOffset;
        }
        m_relay_current_pos += 1;
        for(int i = 0; i <= m_relay_current_pos-offset; i++)
        {
            m_relay_buffer[m_relay_current_pos-i] = m_relay_buffer[m_relay_current_pos-i-1];
        }
        m_relay_buffer[offset] = ')';

        return true;
    }